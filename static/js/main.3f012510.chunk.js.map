{"version":3,"sources":["components/Header.tsx","helpers/ChartDataHelper.ts","helpers/colours.ts","components/Chart.tsx","components/Main.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","ChartMetrics","ChartTypes","githubIcon","className","d","Group","align","Alignment","LEFT","Heading","RIGHT","href","icon","China","Italy","US","Spain","Iran","France","Switzerland","Netherlands","Austria","Belgium","Canada","Norway","Portugal","Brazil","Sweden","Turkey","Israel","Australia","Denmark","Malaysia","Czechia","Ireland","Luxembourg","Japan","Ecuador","Chile","Pakistan","Poland","Thailand","Romania","Finland","Greece","Indonesia","Iceland","Russia","India","Philippines","Singapore","Qatar","Slovenia","Peru","Colombia","Egypt","Panama","Croatia","Bahrain","Mexico","Estonia","Argentina","Serbia","Iraq","Lebanon","Algeria","Lithuania","Armenia","Bulgaria","Hungary","Morocco","Latvia","Slovakia","Kuwait","Uruguay","Andorra","Tunisia","Jordan","Moldova","Albania","Ukraine","Vietnam","Cyprus","Malta","Brunei","Oman","Senegal","Cambodia","Azerbaijan","Ghana","Venezuela","Belarus","Afghanistan","Kazakhstan","Cameroon","Georgia","Uzbekistan","Cuba","Montenegro","Liechtenstein","Nigeria","Mauritius","Kyrgyzstan","Rwanda","Bangladesh","Paraguay","Honduras","Bolivia","Monaco","Kenya","Jamaica","Guatemala","Togo","Madagascar","Barbados","Uganda","Maldives","Ethiopia","Tanzania","Zambia","Djibouti","Mongolia","Haiti","Suriname","Namibia","Niger","Seychelles","Dominica","Benin","Gabon","Bahamas","Fiji","Guyana","Mozambique","Syria","Eritrea","Eswatini","Guinea","Angola","Chad","Gambia","Liberia","Nepal","Sudan","Zimbabwe","Laos","Bhutan","Mauritania","Nicaragua","Belize","Mali","Somalia","Grenada","Libya","ChartDataHelper","chartType","chartMetric","numCountries","numDates","this","getTopChartData","fetchData","apiData","latestDateWithData","getLatestDateWithData","sortedCountries","getTopChartCountries","chartData","formatDataForChart","console","log","fetch","response","json","Active","Recovered","i","country","length","countryData","date","Confirmed","Object","keys","sort","a","b","calculateActiveMetric","find","item","slice","chartSeries","label","colour","colours","data","indexOfLatestDate","findIndex","yValue","push","x","Date","y","Chart","props","useState","setChartData","isDataLoaded","setIsDataLoaded","useEffect","getData","Top","newChartData","loadChartData","style","width","height","axes","primary","type","position","getSeriesStyle","series","color","originalSeries","tooltip","Main","setChartMetric","handleChartMetricButtonClick","newMetric","active","onClick","Deaths","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f012510.chunk.js","sourcesContent":["import React from 'react';\nimport { Alignment, Button, Navbar } from '@blueprintjs/core';\n\nimport './Header.css';\n\nfunction Header() {\n  const githubIcon = (\n    <span className=\"bp3-icon\">\n      <svg>\n        <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\n      </svg>\n    </span>\n  );\n\n  return (\n    <header>\n      <Navbar className=\"bp3-dark\">\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>COVID-19 Trends</Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <a href=\"https://github.com/bmaupin/covid19-trends#readme\">\n            <Button className=\"HeaderButton bp3-minimal\" icon=\"help\" />\n          </a>\n          <a href=\"https://github.com/bmaupin/covid19-trends\">\n            <Button className=\"HeaderButton bp3-minimal\" icon={githubIcon} />\n          </a>\n        </Navbar.Group>\n      </Navbar>\n    </header>\n  );\n}\n\nexport default Header;\n","import colours from './colours';\n\nconst API_URL = 'https://pomber.github.io/covid19/timeseries.json';\n\n// TODO: is this the best term?\n// Alternatives: attribute, measurement, characteristic, variable, factor, statistic, measure,\n// criterion, property, element, metric, criteria\nexport enum ChartMetrics {\n  Active = 'active',\n  Confirmed = 'confirmed',\n  Deaths = 'deaths',\n  Recovered = 'recovered',\n}\n\nexport enum ChartTypes {\n  Top,\n}\n\ninterface ChartDatum {\n  x: Date;\n  y: number;\n}\n\nexport interface ChartSeries {\n  label: string;\n  data: ChartDatum[];\n  colour: string;\n}\n\nexport interface ChartData extends Array<ChartSeries> {}\n\ninterface ApiCountryData {\n  date: string;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n\ninterface ApiData {\n  [key: string]: Array<ApiCountryData>;\n}\n\nexport class ChartDataHelper {\n  static async getData(\n    chartType: ChartTypes,\n    chartMetric: ChartMetrics,\n    numCountries: number,\n    numDates: number\n  ): Promise<ChartData> {\n    switch (chartType) {\n      default:\n        return await this.getTopChartData(chartMetric, numCountries, numDates);\n    }\n  }\n\n  private static async getTopChartData(\n    chartMetric: ChartMetrics,\n    numCountries: number,\n    numDates: number\n  ): Promise<ChartData> {\n    const apiData = await this.fetchData();\n    const latestDateWithData = this.getLatestDateWithData(apiData, chartMetric);\n    const sortedCountries = this.getTopChartCountries(\n      apiData,\n      chartMetric,\n      latestDateWithData,\n      numCountries\n    );\n    const chartData = this.formatDataForChart(\n      apiData,\n      sortedCountries,\n      chartMetric,\n      latestDateWithData,\n      numDates\n    );\n\n    // TODO\n    console.log('apiData: ', apiData);\n\n    return chartData;\n  }\n\n  private static async fetchData() {\n    const response = await fetch(API_URL);\n\n    return response.json();\n  }\n\n  private static getLatestDateWithData(\n    apiData: ApiData,\n    chartMetric: ChartMetrics\n  ): string | undefined {\n    if (chartMetric === ChartMetrics.Active) {\n      chartMetric = ChartMetrics.Recovered;\n    }\n\n    let i = 1;\n    for (const country in apiData) {\n      console.log(country);\n      for (; i <= apiData[country].length; i++) {\n        const countryData = apiData[country][apiData[country].length - i];\n        if (countryData[chartMetric] !== null) {\n          return countryData.date;\n        }\n      }\n    }\n  }\n\n  private static calculateActiveMetric(countryData: ApiCountryData): number {\n    return (\n      countryData[ChartMetrics.Confirmed] - countryData[ChartMetrics.Recovered]\n    );\n  }\n\n  private static getTopChartCountries(\n    apiData: ApiData,\n    chartMetric: ChartMetrics,\n    latestDateWithData: string | undefined,\n    numCountries: number\n  ): Array<string> {\n    const sortedCountries = Object.keys(apiData).sort((a, b) => {\n      if (chartMetric === ChartMetrics.Active) {\n        return (\n          this.calculateActiveMetric(\n            apiData[b].find(item => item.date === latestDateWithData)!\n          ) -\n          this.calculateActiveMetric(\n            apiData[a].find(item => item.date === latestDateWithData)!\n          )\n        );\n      } else {\n        return (\n          apiData[b].find(item => item.date === latestDateWithData)![\n            chartMetric\n          ] -\n          apiData[a].find(item => item.date === latestDateWithData)![\n            chartMetric\n          ]\n        );\n      }\n    });\n\n    return sortedCountries.slice(0, numCountries);\n  }\n\n  private static formatDataForChart(\n    apiData: ApiData,\n    sortedCountries: Array<string>,\n    chartMetric: ChartMetrics,\n    latestDateWithData: string | undefined,\n    numDates: number\n  ): ChartData {\n    let chartData = [] as ChartData;\n\n    for (const country of sortedCountries) {\n      let chartSeries = {} as ChartSeries;\n      chartSeries.label = country;\n      chartSeries.colour = colours[country];\n\n      chartSeries.data = [];\n\n      const indexOfLatestDate = apiData[country].findIndex(\n        countryData => countryData.date === latestDateWithData\n      );\n\n      // TODO: this assumes the data will always be in order\n      for (const countryData of apiData[country].slice(\n        indexOfLatestDate + 1 - numDates,\n        indexOfLatestDate + 1\n      )) {\n        let yValue;\n        if (chartMetric === ChartMetrics.Active) {\n          yValue = this.calculateActiveMetric(countryData);\n        } else {\n          yValue = countryData[chartMetric];\n        }\n        chartSeries.data.push({\n          x: new Date(countryData.date),\n          y: yValue,\n        });\n      }\n\n      chartData.push(chartSeries);\n    }\n\n    return chartData;\n  }\n}\n","// Generated using scripts/generateColours.ts\n\ninterface Colours {\n  [key: string]: string;\n}\n\nexport default {\n  China: '#FF1744',\n  Italy: '#3D5AFE',\n  US: '#1DE9B6',\n  Spain: '#FFEA00',\n  Iran: '#F50057',\n  France: '#2979FF',\n  Switzerland: '#00E676',\n  'United Kingdom': '#FFC400',\n  'Korea, South': '#D500F9',\n  Netherlands: '#00B0FF',\n  Austria: '#76FF03',\n  Belgium: '#FF9100',\n  Canada: '#651FFF',\n  Norway: '#00E5FF',\n  Portugal: '#C6FF00',\n  Brazil: '#FF3D00',\n  Sweden: '#D50000',\n  Turkey: '#304FFE',\n  Israel: '#00BFA5',\n  Australia: '#FFD600',\n  Denmark: '#C51162',\n  Malaysia: '#2962FF',\n  Czechia: '#00C853',\n  Ireland: '#FFAB00',\n  Luxembourg: '#AA00FF',\n  Japan: '#0091EA',\n  Ecuador: '#64DD17',\n  Chile: '#FF6D00',\n  Pakistan: '#6200EA',\n  Poland: '#00B8D4',\n  Thailand: '#AEEA00',\n  Romania: '#DD2C00',\n  'Saudi Arabia': '#FF5252',\n  Finland: '#536DFE',\n  Greece: '#64FFDA',\n  Indonesia: '#FFFF00',\n  Iceland: '#FF4081',\n  'Diamond Princess': '#448AFF',\n  'South Africa': '#69F0AE',\n  Russia: '#FFD740',\n  India: '#E040FB',\n  Philippines: '#40C4FF',\n  Singapore: '#B2FF59',\n  Qatar: '#FFAB40',\n  Slovenia: '#7C4DFF',\n  Peru: '#18FFFF',\n  Colombia: '#EEFF41',\n  Egypt: '#FF6E40',\n  Panama: '#FF8A80',\n  Croatia: '#8C9EFF',\n  Bahrain: '#A7FFEB',\n  Mexico: '#FFFF8D',\n  Estonia: '#FF80AB',\n  'Dominican Republic': '#82B1FF',\n  Argentina: '#B9F6CA',\n  Serbia: '#FFE57F',\n  Iraq: '#EA80FC',\n  Lebanon: '#80D8FF',\n  'United Arab Emirates': '#CCFF90',\n  Algeria: '#FFD180',\n  Lithuania: '#B388FF',\n  Armenia: '#84FFFF',\n  Bulgaria: '#F4FF81',\n  'Taiwan*': '#FF9E80',\n  Hungary: '#F44336',\n  Morocco: '#3F51B5',\n  Latvia: '#009688',\n  Slovakia: '#FFEB3B',\n  'San Marino': '#795548',\n  'New Zealand': '#E91E63',\n  'Costa Rica': '#2196F3',\n  Kuwait: '#4CAF50',\n  Uruguay: '#FFC107',\n  Andorra: '#9E9E9E',\n  'North Macedonia': '#9C27B0',\n  'Bosnia and Herzegovina': '#03A9F4',\n  Tunisia: '#8BC34A',\n  Jordan: '#FF9800',\n  Moldova: '#673AB7',\n  Albania: '#00BCD4',\n  'Burkina Faso': '#CDDC39',\n  Ukraine: '#FF5722',\n  Vietnam: '#B71C1C',\n  Cyprus: '#1A237E',\n  Malta: '#004D40',\n  Brunei: '#F57F17',\n  'Sri Lanka': '#3E2723',\n  Oman: '#880E4F',\n  Senegal: '#0D47A1',\n  Cambodia: '#1B5E20',\n  Azerbaijan: '#FF6F00',\n  Ghana: '#212121',\n  Venezuela: '#4A148C',\n  Belarus: '#01579B',\n  Afghanistan: '#33691E',\n  Kazakhstan: '#E65100',\n  \"Cote d'Ivoire\": '#311B92',\n  Cameroon: '#006064',\n  Georgia: '#827717',\n  'Trinidad and Tobago': '#BF360C',\n  Uzbekistan: '#EF5350',\n  Cuba: '#5C6BC0',\n  Montenegro: '#26A69A',\n  Liechtenstein: '#FFEE58',\n  Nigeria: '#8D6E63',\n  'Congo (Kinshasa)': '#EC407A',\n  Mauritius: '#42A5F5',\n  Kyrgyzstan: '#66BB6A',\n  Rwanda: '#FFCA28',\n  Bangladesh: '#BDBDBD',\n  Paraguay: '#AB47BC',\n  Honduras: '#29B6F6',\n  Bolivia: '#9CCC65',\n  Monaco: '#FFA726',\n  Kenya: '#7E57C2',\n  Jamaica: '#26C6DA',\n  Guatemala: '#D4E157',\n  Togo: '#FF7043',\n  Madagascar: '#C62828',\n  Barbados: '#283593',\n  Uganda: '#00695C',\n  Maldives: '#F9A825',\n  Ethiopia: '#4E342E',\n  Tanzania: '#AD1457',\n  Zambia: '#1565C0',\n  Djibouti: '#2E7D32',\n  Mongolia: '#FF8F00',\n  'El Salvador': '#424242',\n  'Equatorial Guinea': '#6A1B9A',\n  Haiti: '#0277BD',\n  Suriname: '#558B2F',\n  Namibia: '#EF6C00',\n  Niger: '#4527A0',\n  Seychelles: '#00838F',\n  Dominica: '#9E9D24',\n  Benin: '#D84315',\n  Gabon: '#E57373',\n  Bahamas: '#7986CB',\n  Fiji: '#4DB6AC',\n  Guyana: '#FFF176',\n  Mozambique: '#A1887F',\n  Syria: '#F06292',\n  'Cabo Verde': '#64B5F6',\n  'Congo (Brazzaville)': '#81C784',\n  Eritrea: '#FFD54F',\n  Eswatini: '#E0E0E0',\n  Guinea: '#BA68C8',\n  'Holy See': '#4FC3F7',\n  Angola: '#AED581',\n  'Antigua and Barbuda': '#FFB74D',\n  'Central African Republic': '#9575CD',\n  Chad: '#4DD0E1',\n  Gambia: '#DCE775',\n  Liberia: '#FF8A65',\n  Nepal: '#D32F2F',\n  'Saint Lucia': '#303F9F',\n  Sudan: '#00796B',\n  Zimbabwe: '#FBC02D',\n  Laos: '#5D4037',\n  Bhutan: '#C2185B',\n  Mauritania: '#1976D2',\n  Nicaragua: '#388E3C',\n  Belize: '#FFA000',\n  'Guinea-Bissau': '#616161',\n  Mali: '#7B1FA2',\n  'Saint Kitts and Nevis': '#0288D1',\n  'Papua New Guinea': '#689F38',\n  'Saint Vincent and the Grenadines': '#F57C00',\n  Somalia: '#512DA8',\n  Grenada: '#0097A7',\n  'Timor-Leste': '#AFB42B',\n  Libya: '#E64A19',\n  'West Bank and Gaza': '#EF9A9A',\n} as Colours;\n","import React, { useState, useEffect } from 'react';\nimport { Chart as ReactChart } from 'react-charts';\nimport {\n  ChartMetrics,\n  ChartDataHelper,\n  ChartTypes,\n  ChartData,\n} from '../helpers/ChartDataHelper';\n\ninterface IProps {\n  chartMetric: ChartMetrics;\n}\n\nfunction Chart(props: IProps) {\n  const axes = [\n    { primary: true, type: 'time', position: 'bottom' },\n    { type: 'linear', position: 'left' },\n  ];\n\n  const [chartData, setChartData] = useState<ChartData | null>(null);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  const _getSeriesStyle = (series: any) => {\n    return {\n      color: series.originalSeries.colour,\n    };\n  };\n\n  useEffect(() => {\n    async function loadChartData() {\n      const newChartData = await ChartDataHelper.getData(\n        ChartTypes.Top,\n        props.chartMetric,\n        10,\n        10\n      );\n\n      setChartData(newChartData);\n      setIsDataLoaded(true);\n    }\n\n    loadChartData();\n  }, [props.chartMetric]);\n\n  return (\n    // A react-chart hyper-responsively and continuously fills the available\n    // space of its parent element automatically\n    <div\n      style={{\n        width: '800px',\n        height: '600px',\n      }}\n    >\n      {/* The axes won't show correctly if the chart is rendered before the data is loaded */}\n      {isDataLoaded && (\n        <ReactChart\n          axes={axes}\n          data={chartData}\n          getSeriesStyle={_getSeriesStyle}\n          tooltip\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Chart;\n","import React, { useState } from 'react';\n\nimport './Main.css';\nimport Chart from './Chart';\nimport { Button, ButtonGroup } from '@blueprintjs/core';\nimport { ChartMetrics } from '../helpers/ChartDataHelper';\n\nfunction Main() {\n  const [chartMetric, setChartMetric] = useState(ChartMetrics.Active);\n\n  function handleChartMetricButtonClick(newMetric: ChartMetrics) {\n    setChartMetric(newMetric);\n  }\n\n  return (\n    <div className=\"Main\">\n      <ButtonGroup className=\"ButtonGroup\">\n        <Button\n          active={chartMetric === ChartMetrics.Active}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Active)}\n        >\n          Active\n        </Button>\n        <Button\n          active={chartMetric === ChartMetrics.Confirmed}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Confirmed)}\n        >\n          Confirmed\n        </Button>\n        <Button\n          active={chartMetric === ChartMetrics.Deaths}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Deaths)}\n        >\n          Deaths\n        </Button>\n        <Button\n          active={chartMetric === ChartMetrics.Recovered}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Recovered)}\n        >\n          Recovered\n        </Button>\n      </ButtonGroup>\n      <Chart chartMetric={chartMetric} />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\nimport Header from './Header';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}