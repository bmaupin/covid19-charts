{"version":3,"sources":["components/Header.tsx","helpers/ChartDataHelper.ts","hooks/useChartConfig.js","components/Chart.tsx","components/Main.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","ChartMetrics","ChartTypes","githubIcon","className","height","width","d","Group","align","Alignment","LEFT","Heading","RIGHT","href","icon","ChartDataHelper","fetch","response","json","chartType","chartMetric","numCountries","numDates","getTopChartData","fetchData","apiData","getTopChartCountries","sortedCountries","chartData","formatDataForChart","console","log","country","chartSeries","label","data","slice","length","countryData","push","x","Date","date","y","latestDate","Object","keys","sort","a","b","find","item","options","elementType","primaryAxisType","secondaryAxisType","primaryAxisPosition","secondaryAxisPosition","secondaryAxisStack","primaryAxisShow","secondaryAxisShow","grouping","tooltipAnchor","tooltipAlign","snapCursor","optionKeys","makeDataFrom","dataType","series","useR","datums","Array","Math","max","round","random","map","i","startDate","setMinutes","setSeconds","setMilliseconds","_","getTime","r","floor","undefined","makeSeries","Chart","props","useState","setChartData","isDataLoaded","setIsDataLoaded","testData","show","count","resizable","canRandomize","primaryAxisStack","React","state","setState","useEffect","old","Options","filter","option","indexOf","key","value","onChange","target","toString","randomizeData","useChartConfig","getData","Top","newChartData","loadChartData","style","axes","primary","type","position","tooltip","Main","Confirmed","setChartMetric","handleChartMetricButtonClick","newMetric","active","onClick","Deaths","Recovered","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ad01ff5e.chunk.js","sourcesContent":["import React from 'react';\nimport { Alignment, Button, Navbar } from '@blueprintjs/core';\n\nfunction Header() {\n  const githubIcon = (\n    <span className=\"bp3-icon\">\n      <svg height=\"24px\" width=\"24px\">\n        <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\n      </svg>\n    </span>\n  );\n\n  return (\n    <header>\n      <Navbar className=\"bp3-dark\">\n        <Navbar.Group align={Alignment.LEFT}>\n          <Navbar.Heading>COVID-19 Trends</Navbar.Heading>\n        </Navbar.Group>\n        <Navbar.Group align={Alignment.RIGHT}>\n          <a href=\"https://github.com/bmaupin/covid19-trends\">\n            <Button className=\"bp3-minimal\" icon={githubIcon} />\n          </a>\n        </Navbar.Group>\n      </Navbar>\n    </header>\n  );\n}\n\nexport default Header;\n","const API_URL = 'https://pomber.github.io/covid19/timeseries.json';\n\n// TODO: is this the best term?\n// Alternatives: attribute, measurement, characteristic, variable, factor, statistic, measure,\n// criterion, property, element, metric, criteria\nexport enum ChartMetrics {\n  Confirmed = 'confirmed',\n  Deaths = 'deaths',\n  Recovered = 'recovered',\n}\n\nexport enum ChartTypes {\n  Top,\n}\n\ninterface ChartDatum {\n  x: Date;\n  y: number;\n}\n\ninterface ChartSeries {\n  label: string;\n  data: ChartDatum[];\n}\n\nexport interface ChartData extends Array<ChartSeries> {}\n\ninterface ApiCountryData {\n  date: string;\n  confirmed: number;\n  deaths: number;\n  recovered: number;\n}\n\ninterface ApiData {\n  [key: string]: Array<ApiCountryData>;\n}\n\n// TODO: do we really need a class here?\nexport class ChartDataHelper {\n  static async fetchData() {\n    const response = await fetch(API_URL);\n\n    return response.json();\n  }\n\n  static async getData(\n    chartType: ChartTypes,\n    chartMetric: ChartMetrics,\n    numCountries: number,\n    numDates: number\n  ): Promise<ChartData> {\n    switch (chartType) {\n      default:\n        return await ChartDataHelper.getTopChartData(\n          chartMetric,\n          numCountries,\n          numDates\n        );\n    }\n  }\n\n  static async getTopChartData(\n    chartMetric: ChartMetrics,\n    numCountries: number,\n    numDates: number\n  ): Promise<ChartData> {\n    const apiData = await ChartDataHelper.fetchData();\n    const sortedCountries = await ChartDataHelper.getTopChartCountries(\n      apiData,\n      chartMetric,\n      numCountries\n    );\n    const chartData = ChartDataHelper.formatDataForChart(\n      apiData,\n      sortedCountries,\n      chartMetric,\n      numDates\n    );\n\n    // TODO\n    console.log(apiData);\n\n    return chartData;\n  }\n\n  static formatDataForChart(\n    apiData: ApiData,\n    sortedCountries: Array<string>,\n    chartMetric: ChartMetrics,\n    numDates: number\n  ): ChartData {\n    let chartData = [] as ChartData;\n\n    for (const country of sortedCountries) {\n      let chartSeries = {} as ChartSeries;\n      chartSeries.label = country;\n\n      chartSeries.data = [];\n\n      // TODO: this assumes the data will always be in order\n      for (const countryData of apiData[country].slice(\n        apiData[country].length - numDates,\n        apiData[country].length\n      )) {\n        chartSeries.data.push({\n          x: new Date(countryData.date),\n          y: countryData[chartMetric],\n        });\n      }\n\n      chartData.push(chartSeries);\n    }\n\n    return chartData;\n  }\n\n  static async getTopChartCountries(\n    apiData: ApiData,\n    chartMetric: ChartMetrics,\n    numCountries: number\n  ): Promise<Array<string>> {\n    const latestDate = apiData['Canada'][apiData['Canada'].length - 1].date;\n\n    const sortedCountries = Object.keys(apiData).sort(function(a, b) {\n      return (\n        apiData[b].find(item => item.date === latestDate)![chartMetric] -\n        apiData[a].find(item => item.date === latestDate)![chartMetric]\n      );\n    });\n\n    return sortedCountries.slice(0, numCountries);\n  }\n}\n","import React from 'react';\n//\n\nconst options = {\n  elementType: ['line', 'area', 'bar', 'bubble'],\n  primaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  secondaryAxisType: ['linear', 'time', 'log', 'ordinal'],\n  primaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisPosition: ['top', 'left', 'right', 'bottom'],\n  secondaryAxisStack: [true, false],\n  primaryAxisShow: [true, false],\n  secondaryAxisShow: [true, false],\n  grouping: ['single', 'series', 'primary', 'secondary'],\n  tooltipAnchor: [\n    'closest',\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'center',\n    'gridTop',\n    'gridBottom',\n    'gridLeft',\n    'gridRight',\n    'gridCenter',\n    'pointer',\n  ],\n  tooltipAlign: [\n    'auto',\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'topLeft',\n    'topRight',\n    'bottomLeft',\n    'bottomRight',\n    'center',\n  ],\n  snapCursor: [true, false],\n};\n\nconst optionKeys = Object.keys(options);\n\nexport default function useChartConfig({\n  series = 0,\n  useR = false,\n  show = [],\n  count = 1,\n  resizable = true,\n  canRandomize = true,\n  dataType = 'time',\n  elementType = 'line',\n  primaryAxisType = 'time',\n  secondaryAxisType = 'linear',\n  primaryAxisPosition = 'bottom',\n  secondaryAxisPosition = 'left',\n  primaryAxisStack = false,\n  secondaryAxisStack = true,\n  primaryAxisShow = true,\n  secondaryAxisShow = true,\n  tooltipAnchor = 'closest',\n  tooltipAlign = 'auto',\n  grouping = 'primary',\n  snapCursor = true,\n  datums = 10,\n}) {\n  const [state, setState] = React.useState({\n    count,\n    resizable,\n    canRandomize,\n    dataType,\n    elementType,\n    primaryAxisType,\n    secondaryAxisType,\n    primaryAxisPosition,\n    secondaryAxisPosition,\n    primaryAxisStack,\n    secondaryAxisStack,\n    primaryAxisShow,\n    secondaryAxisShow,\n    tooltipAnchor,\n    tooltipAlign,\n    grouping,\n    snapCursor,\n    datums,\n    data: makeDataFrom(dataType, series, useR, datums),\n  });\n\n  React.useEffect(() => {\n    setState(old => ({\n      ...old,\n      data: makeDataFrom(dataType, series, useR, datums),\n    }));\n  }, [count, dataType, datums, series, useR]);\n\n  const randomizeData = () =>\n    setState(old => ({\n      ...old,\n      data: makeDataFrom(dataType, series, useR, datums),\n    }));\n\n  const Options = optionKeys\n    .filter(option => show.indexOf(option) > -1)\n    .map(option => (\n      <div key={option}>\n        {option}: &nbsp;\n        <select\n          value={state[option]}\n          onChange={({ target: { value } }) =>\n            setState(old => ({\n              ...old,\n              [option]:\n                typeof options[option][0] === 'boolean'\n                  ? value === 'true'\n                  : value,\n            }))\n          }\n        >\n          {options[option].map(d => (\n            <option value={d} key={d.toString()}>\n              {d.toString()}\n            </option>\n          ))}\n        </select>\n        <br />\n      </div>\n    ));\n\n  return {\n    ...state,\n    randomizeData,\n    Options,\n  };\n}\n\nfunction makeDataFrom(dataType, series, useR, datums) {\n  return [\n    ...new Array(series || Math.max(Math.round(Math.random() * 5), 1)),\n  ].map((d, i) => makeSeries(i, dataType, useR, datums));\n}\n\nfunction makeSeries(i, dataType, useR, datums) {\n  const start = 0;\n  const startDate = new Date();\n  startDate.setMinutes(0);\n  startDate.setSeconds(0);\n  startDate.setMilliseconds(0);\n  // const length = 5 + Math.round(Math.random() * 15)\n  const length = datums;\n  const min = 0;\n  const max = 100;\n  const rMin = 2;\n  const rMax = 20;\n  const nullChance = 0;\n  return {\n    label: `Series ${i + 1}`,\n    datums: [...new Array(length)].map((_, i) => {\n      let x = start + i;\n      if (dataType === 'ordinal') {\n        x = `Ordinal Group ${x}`;\n      }\n      if (dataType === 'time') {\n        x = new Date(startDate.getTime() + 60 * 1000 * 30 * i);\n      }\n      if (dataType === 'linear') {\n        x =\n          Math.random() < nullChance\n            ? null\n            : min + Math.round(Math.random() * (max - min));\n      }\n      const distribution = 1.1;\n      const y =\n        Math.random() < nullChance\n          ? null\n          : min + Math.round(Math.random() * (max - min));\n      const r = !useR\n        ? undefined\n        : rMax -\n          Math.floor(\n            Math.log(Math.random() * (distribution ** rMax - rMin) + rMin) /\n              Math.log(distribution)\n          );\n      return {\n        x,\n        y,\n        r,\n      };\n    }),\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport { Chart as ReactChart } from 'react-charts';\nimport {\n  ChartMetrics,\n  ChartDataHelper,\n  ChartTypes,\n  ChartData,\n} from '../helpers/ChartDataHelper';\nimport useChartConfig from '../hooks/useChartConfig';\n\ninterface IProps {\n  chartMetric: ChartMetrics;\n}\n\nfunction Chart(props: IProps) {\n  const axes = [\n    { primary: true, type: 'time', position: 'bottom' },\n    { type: 'linear', position: 'left' },\n  ];\n\n  const [chartData, setChartData] = useState<ChartData | null>(null);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  // let testData = {} as any;\n  // let randomizeData = {} as any;\n  let testData = useChartConfig({\n    series: 10,\n  });\n  console.log('testData');\n  console.log(testData);\n\n  useEffect(() => {\n    async function loadChartData() {\n      const newChartData = await ChartDataHelper.getData(\n        ChartTypes.Top,\n        props.chartMetric,\n        10,\n        10\n      );\n\n      setChartData(newChartData);\n      setIsDataLoaded(true);\n    }\n\n    loadChartData();\n  }, [props.chartMetric]);\n\n  return (\n    // A react-chart hyper-responsively and continuously fills the available\n    // space of its parent element automatically\n    <div\n      style={{\n        width: '800px',\n        height: '600px',\n      }}\n    >\n      {/* The axes won't show correctly if the chart is rendered before the data is loaded */}\n      {isDataLoaded && <ReactChart data={chartData} axes={axes} tooltip />}\n    </div>\n  );\n}\n\nexport default Chart;\n","import React, { useState } from 'react';\n\nimport './Main.css';\nimport Chart from './Chart';\nimport { Button, ButtonGroup } from '@blueprintjs/core';\nimport { ChartMetrics } from '../helpers/ChartDataHelper';\n\nfunction Main() {\n  const [chartMetric, setChartMetric] = useState(ChartMetrics.Confirmed);\n\n  function handleChartMetricButtonClick(newMetric: ChartMetrics) {\n    setChartMetric(newMetric);\n  }\n\n  return (\n    <div className=\"Main\">\n      <ButtonGroup className=\"ButtonGroup\">\n        <Button\n          active={chartMetric === ChartMetrics.Confirmed}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Confirmed)}\n        >\n          Confirmed\n        </Button>\n        <Button\n          active={chartMetric === ChartMetrics.Deaths}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Deaths)}\n        >\n          Deaths\n        </Button>\n        <Button\n          active={chartMetric === ChartMetrics.Recovered}\n          onClick={() => handleChartMetricButtonClick(ChartMetrics.Recovered)}\n        >\n          Recovered\n        </Button>\n      </ButtonGroup>\n      <Chart chartMetric={chartMetric} />\n    </div>\n  );\n}\n\nexport default Main;\n","import React from 'react';\n\nimport Header from './Header';\nimport Main from './Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}